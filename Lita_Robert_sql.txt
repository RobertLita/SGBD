--4
create table DOCTOR(
  DOCTOR_ID number(15) constraint pk_doc PRIMARY KEY,
  NUME varchar2(30) NOT NULL,
  PRENUME varchar2(30) NOT NULL,
  SALARIU number(10,2) constraint ck_sal_valid CHECK(salariu > 0),
  SPECIALIZARE varchar2(30) NOT NULL,
  DATA_ANGAJARE date NOT NULL
);
create table ASISTENT(
  ASISTENT_ID number(15) constraint pk_asis PRIMARY KEY,
  NUME varchar2(30) NOT NULL,
  PRENUME varchar2(30) NOT NULL,
  SALARIU number(10,2) constraint ck_sal_valid_as CHECK(salariu > 0),
  DOCTOR_ID number(15) constraint fk_doc references doctor(doctor_id) on delete cascade
);
create table CONSULTATIE(
  CONSULTATIE_ID number(15) constraint pk_cons PRIMARY KEY,
  DATA date NOT NULL,
  DIAGNOSTIC varchar2(30) NOT NULL
);
create table TRATAMENT(
  TRATAMENT_ID number(15) constraint pk_trat PRIMARY KEY,
  NUME varchar2(30) NOT NULL,
  DURATA number(5) NOT NULL,
  COST number(10,2) constraint ck_cost_valid CHECK(cost >= 0)
);
create table FISA_MEDICALA(
  FISA_ID number(15) constraint pk_fisa_med PRIMARY KEY,
  CONSULTATIE_ID number(15) constraint fk_cons references consultatie(consultatie_id) on delete cascade,
  OBSERVATII varchar2(200) 
);
create table FISA_TRATAMENT(
  TRATAMENT_ID number(30) constraint pk_ft_trat references tratament(tratament_id) on delete cascade,
  FISA_ID number(30) constraint pk_ft_fisa references fisa_medicala(fisa_id) on delete cascade,
  constraint pk_ft primary key (tratament_id, fisa_id)
);
create table SECTIE(
  SECTIE_ID number(15) constraint pk_sectie PRIMARY KEY,
  NR_SALOANE number(5) NOT NULL,
  NUME_SECTIE varchar2(30) NOT NULL
);
create table SALON(
  SALON_ID number(15) constraint pk_salon PRIMARY KEY,
  ASISTENT_ID number(15) constraint fk_salon_asis references asistent(asistent_id) on delete cascade,
  CAPACITATE number(10) constraint ck_cap_valid CHECK(capacitate > 0),
  SECTIE_ID number(15) constraint fk_sal_sec references sectie(sectie_id) on delete cascade
);
create table PACIENT(
  PACIENT_ID number(15) constraint pk_pac PRIMARY KEY,
  NUME varchar2(30) NOT NULL,
  PRENUME varchar2(30) NOT NULL,
  FISA_ID number(15) constraint fk_pac_fm references fisa_medicala(fisa_id) on delete cascade,
  SALON_ID number(15) constraint fk_pac_sal references salon(salon_id) on delete cascade,
  DATA_INTERNARE date NOT NULL,
  DATA_EXTERNARE date
);



--5
INSERT INTO doctor (doctor_id,nume, prenume, salariu, specializare, data_angajare)
VALUES (1, 'POPESCU', 'MIHNEA', 45000.99, 'ORTODONTIE', '05.07.2021');
   INSERT INTO doctor (doctor_id,nume, prenume, salariu, specializare, data_angajare)
VALUES (2, 'GEORGESCU', 'VASILE', 40000.5, 'NEUROLOGIE', '25.10.2020');
   INSERT INTO doctor (doctor_id,nume, prenume, salariu, specializare, data_angajare)
VALUES (3, 'OPREA', 'CORNEL', 12043.22, 'CHIRURGIE', '24.12.2020');
   INSERT INTO doctor (doctor_id,nume, prenume, salariu, specializare, data_angajare)
VALUES (4, 'ISTRATE', 'MIHAELA', 22222.22, 'CARDIOLOGIE', '15.03.2021');
   INSERT INTO doctor (doctor_id,nume, prenume, salariu, specializare, data_angajare)
VALUES (5, 'STANCU', 'LACRAMIOARA', 15500, 'RADIOLOGIE', '30.05.2021');
   INSERT INTO doctor (doctor_id,nume, prenume, salariu, specializare, data_angajare)
VALUES (6, 'VALERIU', 'STEFAN', 10000, 'CHIRURGIE', '07.01.2013');
   INSERT INTO doctor (doctor_id,nume, prenume, salariu, specializare, data_angajare)
VALUES (7, 'MIHAILA', 'GETA', 9000, 'CHIRURGIE', '04.05.2020');

INSERT INTO asistent
VALUES (1, 'POPA', 'ALEXANDRU', 8000, 5);
   INSERT INTO asistent 
VALUES (2, 'POPESCU', 'VICTORIA', 9000, 1);
   INSERT INTO asistent 
VALUES (3, 'VASILE', '	MARIA', 4550, 4);
   INSERT INTO asistent 
VALUES (4, 'TOMESCU', 'ROBERT', 5500, 2);
   INSERT INTO asistent 
VALUES (5, 'IONESCU', '	TEODORA', 3245, 3);
INSERT INTO sectie VALUES (1, 10, 'DERMATOLOGIE');
INSERT INTO sectie VALUES (2, 5, 'NEUROLOGIE');
INSERT INTO sectie VALUES (3, 7, 'TERAPIE INTENSIVA');
INSERT INTO sectie VALUES (4, 6, 'NASTERI');
INSERT INTO sectie VALUES (5, 4, 'FRACTURI');
INSERT INTO salon VALUES (1, 4, 10, 2);
INSERT INTO salon VALUES (2, 1, 6, 2);
INSERT INTO salon VALUES (3, 5, 8, 2);
INSERT INTO salon VALUES (4, 5, 3, 2);
INSERT INTO salon VALUES (5, 4, 5, 3);
INSERT INTO tratament VALUES (1, 'REGIM ALIMENTAR', 14, 9000);
INSERT INTO tratament VALUES (2, 'MEDICAMENTE', 7, 200);
INSERT INTO tratament VALUES (3, 'INTERVENTIE CHIRURGICALA', 1, 1200);
INSERT INTO tratament VALUES (4, 'REPAUS FIZIC', 70, 0);
INSERT INTO tratament VALUES (5, 'INTERVENTIE CHIRURGICALA', 1, 1120.5);
INSERT INTO fisa_medicala VALUES (1, 2, null);
INSERT INTO fisa_medicala VALUES (2, 3, 'Dupa operatie, pacientul va avea nevoie de sedinte de recuperare a mobilitatii.');
INSERT INTO fisa_medicala VALUES (3, 4, 'Pacientul a avut parte de o recuperare grea.');
INSERT INTO fisa_medicala VALUES (4, 1, null);
INSERT INTO fisa_medicala VALUES (5, 5, null);
INSERT INTO fisa_tratament VALUES (1, 4);
INSERT INTO fisa_tratament VALUES (2, 3);
INSERT INTO fisa_tratament VALUES (3, 2);
INSERT INTO fisa_tratament VALUES (1, 2);
INSERT INTO fisa_tratament VALUES (5, 1);
INSERT INTO fisa_tratament VALUES (3, 4);
INSERT INTO fisa_tratament VALUES (2, 1);
INSERT INTO fisa_tratament VALUES (3, 1);
INSERT INTO fisa_tratament VALUES (5, 5);
INSERT INTO fisa_tratament VALUES (4, 2);
INSERT INTO fisa_tratament VALUES (4, 5);
INSERT INTO pacient VALUES (1, 'PASCU', 'REMUS', 3, 3, '20.04.2010', null);
INSERT INTO pacient VALUES (2, 'IONESCU', 'GEORGE', 4, 5, '20.04.2019', null);
INSERT INTO pacient VALUES (3, 'TOMA', 'ANDREI', 1, 1, '01.09.2014', '11.09.2014');
INSERT INTO pacient VALUES (4, 'ENESCU', 'LIVIA', 5, 2, '30.03.2021', null);
INSERT INTO pacient VALUES (5, 'DOVLEAC', 'FLORIN', 2, 4, '25.11.2020', '05.12.2020');
INSERT INTO pacient VALUES (6, 'RADU', 'ANCA', 3, 3, '06.09.2021', '12.09.2021');
INSERT INTO pacient VALUES (7, 'IONESCU', 'MIHAI', 2, 3, '25.04.2021', '30.04.2021');
INSERT INTO pacient VALUES (8, 'IONESCU', 'GEROGICA', 1, 3, '01.06.2021', '28.06.2021');
INSERT INTO pacient VALUES (9, 'PASCU', 'REMUS', 2, 1, '03.01.2022', '04.01.2022');
INSERT INTO pacient VALUES (10, 'ANGHEL', 'LAURA', 3, 2, '09.10.2021', null);
INSERT INTO pacient VALUES (11, 'PIRVULESCU', 'OTILIA', 2, 2, '14.10.2021', null);
INSERT INTO pacient VALUES (12, 'PAVEL', 'AURICA', 3, 4, '14.02.2019', '20.02.2019');
INSERT INTO pacient VALUES (13, 'DIACONU', 'VIOLETA', 5, 1, '27.08.2020',null);
INSERT INTO pacient VALUES (14, 'COSMA', 'ANDREEA', 1, 4, '19.06.2018', '24.06.2018');



--6
CREATE OR REPLACE TYPE p_ext_2021 IS varray(20) OF VARCHAR(50);
/
CREATE OR REPLACE TYPE p_ext_2020 IS TABLE OF VARCHAR(50);
/

CREATE OR REPLACE PROCEDURE bilant IS
    pacienti_2021   p_ext_2021 := p_ext_2021();
    pacienti_2020   p_ext_2020 := p_ext_2020();
BEGIN
    SELECT
        nume
    BULK COLLECT INTO pacienti_2021
    FROM
        pacient
    WHERE
        data_externare IS NOT NULL
        AND to_char(data_externare, 'YYYY') = '2021';

    SELECT
        nume
    BULK COLLECT INTO pacienti_2020
    FROM
        pacient
    WHERE
        data_externare IS NOT NULL
        AND to_char(data_externare, 'YYYY') = '2020';

    dbms_output.put_line('In anul 2021 s-au inregistrat '
                         || pacienti_2021.count
                         || ' pacienti, in comparatie cu '
                         || pacienti_2020.count
                         || ' in 2020.');

    IF pacienti_2021.count > pacienti_2020.count THEN
        dbms_output.put_line('Astfel, s-a inregistrat o crestere cu '
                             || pacienti_2021.count /(pacienti_2020.count * 1.0) * 100
                             || '% fata de anul trecut.');
    ELSE
        dbms_output.put_line('Astfel, s-a inregistrat o scadere cu '
                             || pacienti_2020.count /(pacienti_2021.count * 1.0) * 100
                             || '% fata de anul trecut.');
    END IF;

--EXCEPTION
--    WHEN no_data_found THEN
--        raise_application_error(-20000, 'Nu exista pacienti.');
--    WHEN OTHERS THEN
--        raise_application_error(-20002, 'Alta eroare!');
END bilant;
/

EXECUTE bilant;

--7
CREATE OR REPLACE PROCEDURE nr_salon_status IS

    v_nume_asistent   asistent.nume%TYPE;
    v_nume_doctor     doctor.nume%TYPE;
    v_nr_saloane      NUMBER;
    CURSOR c IS
    SELECT
        d.nume
        || ' '
        || d.prenume,
        a.nume
        || ' '
        || a.prenume,
        COUNT(s.salon_id)
    FROM
        doctor     d
        JOIN asistent   a ON d.doctor_id = a.doctor_id
        LEFT JOIN salon      s ON s.asistent_id = a.asistent_id
    GROUP BY
        a.nume,
        a.prenume,
        d.nume,
        d.prenume
    ORDER BY
        d.nume;

BEGIN
    OPEN c;
    LOOP
        FETCH c INTO
            v_nume_doctor,
            v_nume_asistent,
            v_nr_saloane;
        EXIT WHEN c%notfound;
        IF v_nr_saloane <> 0 THEN
            dbms_output.put_line('Doctorul '
                                 || v_nume_doctor
                                 || ' coopereaza cu asistentul '
                                 || v_nume_asistent
                                 || ' si se ocupa de '
                                 || v_nr_saloane
                                 || ' saloane.');
        ELSE
            dbms_output.put_line('Doctorul '
                                 || v_nume_doctor
                                 || ' coopereaza cu asistentul '
                                 || v_nume_asistent
                                 || ' dar momentan nu se ocupa de niciun salon.');
        END IF;

    END LOOP;

    CLOSE c;
END nr_salon_status;
/

EXECUTE nr_salon_status;

--8
CREATE OR REPLACE FUNCTION data_externare (
    v_nume_pacient pacient.nume%TYPE
) RETURN DATE IS
    data_ext pacient.data_internare%TYPE;
BEGIN
    SELECT
        nvl(p.data_externare, p.data_internare) + MAX(t.durata)
    INTO data_ext
    FROM
        pacient          p
        JOIN fisa_medicala    fm ON fm.fisa_id = p.fisa_id
        JOIN fisa_tratament   ft ON fm.fisa_id = ft.fisa_id
        JOIN tratament        t ON t.tratament_id = ft.tratament_id
    GROUP BY
        p.nume,
        p.prenume,
        p.data_externare,
        p.data_internare
    HAVING p.data_externare IS NULL
           AND lower(p.nume
                     || ' '
                     || p.prenume) = lower(v_nume_pacient);

    RETURN data_ext;
EXCEPTION
    WHEN no_data_found THEN
        raise_application_error(-20000, 'Nu exista acest pacient sau i se cunoaste data de externare.');
    WHEN too_many_rows THEN
        raise_application_error(-20001, 'Exista mai multi pacienti cu acest nume si fara data de externare.');
    WHEN OTHERS THEN
        raise_application_error(-20002, 'Alta eroare!');
END data_externare;
/

SELECT data_externare('PIRVULESCU OTILIA')
FROM dual; --ok

SELECT data_externare('TOMA GHEORGHE')
FROM dual; --no_data_found (nu exista acest pacient)

SELECT data_externare('PASCU REMUS')
FROM dual; --too_many_rows (exista mai multi pacienti cu acest nume si fara data de externare)


--9
CREATE OR REPLACE PROCEDURE info_pacient (
    v_nume_pacient pacient.nume%TYPE
) IS

    v_nume_sectie     sectie.nume_sectie%TYPE;
    v_salon_id        salon.salon_id%TYPE;
    v_nume_asistent   asistent.nume%TYPE;
    v_nume_doctor     doctor.nume%TYPE;
BEGIN
    SELECT
        s.salon_id,
        se.nume_sectie,
        d.nume
        || ' '
        || d.prenume,
        a.nume
        || ' '
        || a.prenume
    INTO
        v_salon_id,
        v_nume_sectie,
        v_nume_doctor,
        v_nume_asistent
    FROM
        pacient    p
        JOIN salon      s ON s.salon_id = p.salon_id
        JOIN asistent   a ON s.asistent_id = a.asistent_id
        JOIN doctor     d ON d.doctor_id = a.doctor_id
        JOIN sectie     se ON se.sectie_id = s.sectie_id
    WHERE
        lower(p.nume
              || ' '
              || p.prenume) = lower(v_nume_pacient);

    dbms_output.put_line('Pacientul '
                         || v_nume_pacient
                         || ' este internat in salonul '
                         || v_salon_id
                         || ' din sectia '
                         || v_nume_sectie);

    dbms_output.put_line('De asemenea, este ingrijit de asistenul '
                         || v_nume_asistent
                         || ' si doctorul '
                         || v_nume_doctor);
EXCEPTION
    WHEN no_data_found THEN
        raise_application_error(-20000, 'Nu exista acest pacient.');
    WHEN too_many_rows THEN
        raise_application_error(-20001, 'Exista mai multi pacienti cu acest nume.');
    WHEN OTHERS THEN
        raise_application_error(-20002, 'Alta eroare!');
END info_pacient;
/

EXECUTE info_pacient('TOMA ANDREI'); --OK
EXECUTE info_pacient('POPESCU MARA'); --no_data_found (nu exista acest pacient)
EXECUTE info_pacient('PASCU REMUS'); --too_many_rows (exista mai multi pacienti cu acest nume)



--10
CREATE OR REPLACE TRIGGER tr_consultatie 
BEFORE INSERT OR DELETE OR UPDATE ON consultatie
BEGIN
    IF to_char(sysdate, 'D') <> 7 OR to_char(sysdate, 'HH24') > 19 THEN
        IF inserting THEN
            raise_application_error(-20001, 'Inserarea unei noi consultatii nu este permisa in acest moment.');
        ELSIF deleting THEN
            raise_application_error(-20002, 'Stergerea unei consultatii nu este permisa in acest moment.');
        ELSE
            raise_application_error(-20003, 'Modificarea unei consultatii nu este permisa in acest moment.');
        END IF;

    END IF;
END;
/

INSERT INTO consultatie (consultatie_id, data, diagnostic)
VALUES (6, sysdate, 'VARICELA'); --ORA-20001: Inserarea unei noi consultatii nu este permisa in acest moment.


--11
CREATE OR REPLACE TRIGGER salonplin BEFORE
    INSERT ON pacient
DECLARE
    v_cap_actuala   salon.capacitate%TYPE;
    v_cap_totala    salon.capacitate%TYPE;
BEGIN
    SELECT
        COUNT(pacient_id)
    INTO v_cap_actuala
    FROM
        pacient
    GROUP BY
        salon_id
    HAVING
        salon_id = :new.salon_id;

    SELECT
        capacitate
    INTO v_cap_totala
    FROM
        salon
    WHERE
        salon_id = :new.salon_id;

    IF v_cap_actuala = v_cap_totala THEN
        raise_application_error(-20001, 'Nu mai sunt locuri disponibile in salonul dat.');
    END IF;
END;
/

INSERT INTO pacient VALUES (16, 'POPA', 'VASILE', 2, 4, '21.10.2007', '02.11.2007');
--ORA-20001: Nu mai sunt locuri disponibile in salonul dat.


--12
CREATE TABLE actiuni (
    utilizator    VARCHAR2(30),
    nume_bd       VARCHAR2(50),
    eveniment     VARCHAR2(20),
    nume_obiect   VARCHAR2(30),
    data          DATE
);

CREATE OR REPLACE TRIGGER tr_actiuni AFTER CREATE OR DROP OR ALTER ON SCHEMA BEGIN
    INSERT INTO actiuni VALUES (
        sys.login_user,
        sys.database_name,
        sys.sysevent,
        sys.dictionary_obj_name,
        sysdate
    );

END;
/


--13
CREATE OR REPLACE PACKAGE pachet AS
    PROCEDURE bilant;

    PROCEDURE nr_salon_status;

    FUNCTION data_externare (
        v_nume_pacient IN pacient.nume%TYPE
    ) RETURN DATE;

    PROCEDURE info_pacient (
        v_nume_pacient IN pacient.nume%TYPE
    );

END pachet;
/

CREATE OR REPLACE PACKAGE BODY pachet AS

    PROCEDURE bilant IS
        pacienti_2021   p_ext_2021 := p_ext_2021();
        pacienti_2020   p_ext_2020 := p_ext_2020();
    BEGIN
        SELECT
            nume
        BULK COLLECT
        INTO pacienti_2021
        FROM
            pacient
        WHERE
            data_externare IS NOT NULL
            AND to_char(data_externare, 'YYYY') = '2021';

        SELECT
            nume
        BULK COLLECT
        INTO pacienti_2020
        FROM
            pacient
        WHERE
            data_externare IS NOT NULL
            AND to_char(data_externare, 'YYYY') = '2020';

        dbms_output.put_line('In anul 2021 s-au inregistrat '
                             || pacienti_2021.count
                             || ' pacienti, in comparatie cu '
                             || pacienti_2020.count
                             || ' in 2020.');

        IF pacienti_2021.count > pacienti_2020.count THEN
            dbms_output.put_line('Astfel, s-a inregistrat o crestere cu '
                                 || pacienti_2021.count /(pacienti_2020.count * 1.0) * 100
                                 || '% fata de anul trecut.');
        ELSE
            dbms_output.put_line('Astfel, s-a inregistrat o scadere cu '
                                 || pacienti_2020.count /(pacienti_2021.count * 1.0) * 100
                                 || '% fata de anul trecut.');
        END IF;

    END bilant;

    PROCEDURE nr_salon_status IS

        v_nume_asistent   asistent.nume%TYPE;
        v_nume_doctor     doctor.nume%TYPE;
        v_nr_saloane      NUMBER;
        CURSOR c IS
        SELECT
            d.nume
            || ' '
            || d.prenume,
            a.nume
            || ' '
            || a.prenume,
            COUNT(s.salon_id)
        FROM
            doctor     d
            JOIN asistent   a ON d.doctor_id = a.doctor_id
            LEFT JOIN salon      s ON s.asistent_id = a.asistent_id
        GROUP BY
            a.nume,
            a.prenume,
            d.nume,
            d.prenume
        ORDER BY
            d.nume;

    BEGIN
        OPEN c;
        LOOP
            FETCH c INTO
                v_nume_doctor,
                v_nume_asistent,
                v_nr_saloane;
            EXIT WHEN c%notfound;
            IF v_nr_saloane <> 0 THEN
                dbms_output.put_line('Doctorul '
                                     || v_nume_doctor
                                     || ' coopereaza cu asistentul '
                                     || v_nume_asistent
                                     || ' si se ocupa de '
                                     || v_nr_saloane
                                     || ' saloane.');
            ELSE
                dbms_output.put_line('Doctorul '
                                     || v_nume_doctor
                                     || ' coopereaza cu asistentul '
                                     || v_nume_asistent
                                     || ' dar momentan nu se ocupa de niciun salon.');
            END IF;

        END LOOP;

        CLOSE c;
    END nr_salon_status;

    PROCEDURE info_pacient (
        v_nume_pacient pacient.nume%TYPE
    ) IS

        v_nume_sectie     sectie.nume_sectie%TYPE;
        v_salon_id        salon.salon_id%TYPE;
        v_nume_asistent   asistent.nume%TYPE;
        v_nume_doctor     doctor.nume%TYPE;
    BEGIN
        SELECT
            s.salon_id,
            se.nume_sectie,
            d.nume
            || ' '
            || d.prenume,
            a.nume
            || ' '
            || a.prenume
        INTO
            v_salon_id,
            v_nume_sectie,
            v_nume_doctor,
            v_nume_asistent
        FROM
            pacient    p
            JOIN salon      s ON s.salon_id = p.salon_id
            JOIN asistent   a ON s.asistent_id = a.asistent_id
            JOIN doctor     d ON d.doctor_id = a.doctor_id
            JOIN sectie     se ON se.sectie_id = s.sectie_id
        WHERE
            lower(p.nume
                  || ' '
                  || p.prenume) = lower(v_nume_pacient);

        dbms_output.put_line('Pacientul '
                             || v_nume_pacient
                             || ' este internat in salonul '
                             || v_salon_id
                             || ' din sectia '
                             || v_nume_sectie);

        dbms_output.put_line('De asemenea, este ingrijit de asistenul '
                             || v_nume_asistent
                             || ' si doctorul '
                             || v_nume_doctor);
    EXCEPTION
        WHEN no_data_found THEN
            raise_application_error(-20000, 'Nu exista acest pacient.');
        WHEN too_many_rows THEN
            raise_application_error(-20001, 'Exista mai multi pacienti cu acest nume.');
        WHEN OTHERS THEN
            raise_application_error(-20002, 'Alta eroare!');
    END info_pacient;

    FUNCTION data_externare (
        v_nume_pacient pacient.nume%TYPE
    ) RETURN DATE IS
        data_ext pacient.data_internare%TYPE;
    BEGIN
        SELECT
            nvl(p.data_externare, p.data_internare) + MAX(t.durata)
        INTO data_ext
        FROM
            pacient          p
            JOIN fisa_medicala    fm ON fm.fisa_id = p.fisa_id
            JOIN fisa_tratament   ft ON fm.fisa_id = ft.fisa_id
            JOIN tratament        t ON t.tratament_id = ft.tratament_id
        GROUP BY
            p.nume,
            p.prenume,
            p.data_externare,
            p.data_internare
        HAVING p.data_externare IS NULL
               AND lower(p.nume
                         || ' '
                         || p.prenume) = lower(v_nume_pacient);

        RETURN data_ext;
    EXCEPTION
        WHEN no_data_found THEN
            raise_application_error(-20000, 'Nu exista acest pacient sau i se cunoaste data de externare.');
        WHEN too_many_rows THEN
            raise_application_error(-20001, 'Exista mai multi pacienti cu acest nume si fara data de externare.');
        WHEN OTHERS THEN
            raise_application_error(-20002, 'Alta eroare!');
    END data_externare;

END pachet;
/

execute pachet.bilant;
execute pachet.nr_salon_status;
execute pachet.info_pacient('PIRVULESCU OTILIA');
select data_externare('PIRVULESCU OTILIA')
from dual;

--14


CREATE TABLE vizitator (
    vizitator_id   NUMBER(10)
        CONSTRAINT pk_viz PRIMARY KEY,
    nume           VARCHAR2(30) NOT NULL,
    prenume        VARCHAR2(30) NOT NULL,
    nume_pacient   VARCHAR2(30) NOT NULL,
    data           DATE NOT NULL
);

CREATE OR REPLACE TYPE litere IS
    VARRAY(27) OF CHAR;

CREATE OR REPLACE TYPE pacienti IS
    VARRAY(50) OF VARCHAR2(30);


CREATE OR REPLACE PACKAGE cod AS
    viz vizitator%rowtype;
    p_nume pacienti := pacienti();
    p_nume_criptate pacienti := pacienti();
    FUNCTION cripteaza (
        v_nume IN pacient.nume%TYPE
    ) RETURN VARCHAR2;

    FUNCTION verif_cod (
        v_nume_criptat   IN   pacient.nume%TYPE,
        v_nume_viz       IN   vizitator.nume%TYPE,
        v_prenume_viz    IN   vizitator.prenume%TYPE
    ) RETURN VARCHAR2;

    PROCEDURE vec_pacienti;

    PROCEDURE insereaza (
        id_viz           IN   vizitator.vizitator_id%TYPE,
        v_nume_viz       IN   vizitator.nume%TYPE,
        v_prenume_viz    IN   vizitator.prenume%TYPE,
        v_nume_pacient   IN   vizitator.nume_pacient%TYPE
    );

END cod;
/

CREATE OR REPLACE PACKAGE BODY cod AS

    FUNCTION cripteaza (
        v_nume pacient.nume%TYPE
    ) RETURN VARCHAR2 IS

        v_nume_criptat   pacient.nume%TYPE := '';
        litere_c         litere := litere('T', 'U', 'V', 'W', 'X',
       'Y', 'Z', 'A', 'B', 'C',
       'D', 'E', 'F', 'G', 'H',
       'I', 'J', 'K', 'L', 'M',
       'N', 'O', 'P', 'Q', 'R',
       'S');
        i                NUMBER(2) := 1;
    BEGIN
    --v_nume := upper(v_nume);
        LOOP
            EXIT WHEN i - 1 = length(v_nume);
            IF substr(v_nume, i, 1) <> ' ' THEN
                v_nume_criptat := v_nume_criptat
                                  || litere_c(ascii((substr(v_nume, i, 1))) - 64);

            ELSE
                v_nume_criptat := v_nume_criptat || ' ';
            END IF;

            i := i + 1;
        END LOOP;

        RETURN v_nume_criptat;
    END cripteaza;

    PROCEDURE vec_pacienti IS
        i NUMBER(2) := 1;
    BEGIN
        SELECT
            nume
            || ' '
            || prenume
        BULK COLLECT
        INTO p_nume
        FROM
            pacient;

        
        LOOP
            EXIT WHEN i - 1 = p_nume.count;
            if p_nume_criptate.count < p_nume.count then
            p_nume_criptate.extend;
            end if;
            p_nume_criptate(i) := cod.cripteaza(upper(p_nume(i)));

            dbms_output.put_line(p_nume(i)
                                 || '/'
                                 || p_nume_criptate(i));

            i := i + 1;
        END LOOP;

    END vec_pacienti;

    FUNCTION verif_cod (
        v_nume_criptat   pacient.nume%TYPE,
        v_nume_viz       vizitator.nume%TYPE,
        v_prenume_viz    vizitator.prenume%TYPE
    ) RETURN VARCHAR2 IS

        raspuns   VARCHAR2(100) := 'false';
        i         NUMBER(2) := 1;
        id_viz    NUMBER(5);
        v_nume    pacient.nume%TYPE;
        nr_pac number(5);
    PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        cod.vec_pacienti;
        LOOP
            EXIT WHEN raspuns = 'true' OR i - 1 = p_nume.count;
            IF p_nume_criptate(i) = upper(v_nume_criptat) THEN
                raspuns := 'true';
                v_nume := p_nume(i);
            END IF;

            i := i + 1;
        END LOOP;

        SELECT
            MAX(vizitator_id) + 1
        INTO id_viz
        FROM
            vizitator;
            
        SELECT COUNT(1)
        into nr_pac
        FROM vizitator
        WHERE nume_pacient = v_nume;    
            
        IF id_viz IS NULL THEN
            id_viz := 1;
        END IF;
        IF raspuns = 'false' THEN
            raspuns := 'Ne pare rau, codul este gresit.';
            id_viz := 0;
        ELSIF nr_pac < 3 THEN
            raspuns := 'Codul a fost corect! Detaliile vizitatorului au fost introduse in tabel.';
            cod.insereaza(id_viz, v_nume_viz, v_prenume_viz, v_nume);
        ELSE
            raspuns := 'Codul a fost corect dar nu se mai accepta vizitatori.';
        END IF;

        RETURN raspuns;
    END verif_cod;

    PROCEDURE insereaza (
        id_viz           vizitator.vizitator_id%TYPE,
        v_nume_viz       vizitator.nume%TYPE,
        v_prenume_viz    vizitator.prenume%TYPE,
        v_nume_pacient   vizitator.nume_pacient%TYPE
    ) IS
    BEGIN
        IF id_viz <> 0 THEN
            viz.vizitator_id := id_viz;
            viz.nume := upper(v_nume_viz);
            viz.prenume := upper(v_prenume_viz);
            viz.nume_pacient := upper(v_nume_pacient);
            viz.data := sysdate;
            INSERT INTO vizitator VALUES viz;
            commit;
        END IF;
    END insereaza;

END cod;
/


SELECT
    cod.verif_cod('MHFT TGWKXB', 'LITA', 'ROBERT')
FROM
    dual;